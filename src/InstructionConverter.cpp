#include "InstructionConverter.hpp"

#include <capstone/capstone.h>
#include <keystone/keystone.h>


std::pair<ROOP::byteSequence, unsigned>
ROOP::InstructionConverter::convertInstructionSequenceToBytes(std::string instructionSequenceAsm, AssemblySyntax asmSyntax) {
    byteSequence instructionSequence;

    ks_err err;
    ks_engine *ksEngine = NULL;
    const char * const insSeqCString = instructionSequenceAsm.c_str();
    unsigned char *insSeqEncoding = NULL;
    size_t insSeqEncodingSize;
    size_t numDecodedInstructions;
    ks_opt_value syntaxValue;

    err = ks_open(KS_ARCH_X86, KS_MODE_64, &ksEngine);
    if (err != KS_ERR_OK) {
        printf("Keystone: ks_open() failed with error %u!\n", (unsigned)err);
        goto cleanup;
    }

    // Adjust the engine to use Intel or AT&T syntax.
    syntaxValue = (asmSyntax == AssemblySyntax::Intel) ? KS_OPT_SYNTAX_INTEL : KS_OPT_SYNTAX_ATT;
    err = ks_option(ksEngine, KS_OPT_SYNTAX, syntaxValue);
    if (err != KS_ERR_OK) {
        printf("Keystone: ks_option() failed with error %u!\n", (unsigned)err);
        goto cleanup;
    }

    if (ks_asm(ksEngine, insSeqCString, 0, &insSeqEncoding, &insSeqEncodingSize, &numDecodedInstructions) != 0) {
        printf("Keystone: ks_asm() failed with error %u; Number of decoded instructions = %u;\n",
               (unsigned)ks_errno(ksEngine), (unsigned)numDecodedInstructions);
        goto cleanup;
    }

    for (size_t i = 0; i < insSeqEncodingSize; i++) {
        instructionSequence.push_back((byte)insSeqEncoding[i]);
    }

cleanup:
    // Free the bytes generated by Keystone.
    if (insSeqEncoding != NULL) {
        ks_free(insSeqEncoding);
    }

    // Close the Keystone instance.
    if (ksEngine != NULL) {
        ks_close(ksEngine);
    }

// Final
    if (instructionSequence.size() == 0) {
        pv(instructionSequenceAsm); pn;
        pv(numDecodedInstructions); pn;
        exiterror("Keystone conversion from instruction sequence string to instruction sequence bytes failed");
    }

    return {instructionSequence, numDecodedInstructions};
}
